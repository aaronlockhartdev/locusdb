<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="1601"><g><title>locusdb-048fa66588adbb9f`core::option::Option&lt;T&gt;::map_or (1 samples, 0.06%)</title><rect x="0.0625%" y="277" width="0.0625%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3125%" y="287.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;locusdb::store::memtable::skiplift::SkipLift&lt;K,V,_,_&gt; as locusdb::store::memtable::MemTable&lt;K,V&gt;&gt;::create (3 samples, 0.19%)</title><rect x="0.0000%" y="309" width="0.1874%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="319.50"></text></g><g><title>locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::SkipLift&lt;K,V,_,_&gt;::upsert_if (3 samples, 0.19%)</title><rect x="0.0000%" y="293" width="0.1874%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="303.50"></text></g><g><title>locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::SkipLift&lt;K,V,_,_&gt;::gen_height (1 samples, 0.06%)</title><rect x="0.1249%" y="277" width="0.0625%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.3749%" y="287.50"></text></g><g><title>locusdb-048fa66588adbb9f`rand::random (1 samples, 0.06%)</title><rect x="0.1249%" y="261" width="0.0625%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.3749%" y="271.50"></text></g><g><title>locusdb-048fa66588adbb9f`rand::rngs::thread::thread_rng (1 samples, 0.06%)</title><rect x="0.1249%" y="245" width="0.0625%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.3749%" y="255.50"></text></g><g><title>locusdb-048fa66588adbb9f`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.06%)</title><rect x="0.1249%" y="229" width="0.0625%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.3749%" y="239.50"></text></g><g><title>locusdb-048fa66588adbb9f`std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.06%)</title><rect x="0.1249%" y="213" width="0.0625%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.3749%" y="223.50"></text></g><g><title>locusdb-048fa66588adbb9f`rand::rngs::thread::thread_rng::_{{closure}} (1 samples, 0.06%)</title><rect x="0.1249%" y="197" width="0.0625%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.3749%" y="207.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="0.1249%" y="181" width="0.0625%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.3749%" y="191.50"></text></g><g><title>locusdb-048fa66588adbb9f`alloc::rc::RcInnerPtr::inc_strong (1 samples, 0.06%)</title><rect x="0.1249%" y="165" width="0.0625%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.3749%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;locusdb::store::memtable::skiplift::SkipLift&lt;K,V,_,_&gt; as locusdb::store::memtable::MemTable&lt;K,V&gt;&gt;::read::_{{closure}} (1 samples, 0.06%)</title><rect x="0.3748%" y="293" width="0.0625%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="1"/><text x="0.6248%" y="303.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for usize&gt;::partial_cmp (43 samples, 2.69%)</title><rect x="0.4372%" y="293" width="2.6858%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="43"/><text x="0.6872%" y="303.50">lo..</text></g><g><title>locusdb-048fa66588adbb9f`core::option::Option&lt;T&gt;::map_or (3 samples, 0.19%)</title><rect x="3.1230%" y="293" width="0.1874%" height="15" fill="rgb(206,188,39)" fg:x="50" fg:w="3"/><text x="3.3730%" y="303.50"></text></g><g><title>locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::SkipLift&lt;K,V,_,_&gt;::gen_height (1 samples, 0.06%)</title><rect x="3.3104%" y="293" width="0.0625%" height="15" fill="rgb(217,207,13)" fg:x="53" fg:w="1"/><text x="3.5604%" y="303.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::option::Option&lt;T&gt;::map_or (252 samples, 15.74%)</title><rect x="38.6009%" y="277" width="15.7402%" height="15" fill="rgb(231,73,38)" fg:x="618" fg:w="252"/><text x="38.8509%" y="287.50">locusdb-048fa66588adbb9f..</text></g><g><title>locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::SkipLift&lt;K,V,_,_&gt;::upsert_if::_{{closure}} (90 samples, 5.62%)</title><rect x="48.7196%" y="261" width="5.6215%" height="15" fill="rgb(225,20,46)" fg:x="780" fg:w="90"/><text x="48.9696%" y="271.50">locusdb..</text></g><g><title>locusdb-048fa66588adbb9f`core::ptr::drop_in_place&lt;rand::rngs::thread::ThreadRng&gt; (8 samples, 0.50%)</title><rect x="54.5909%" y="245" width="0.4997%" height="15" fill="rgb(210,31,41)" fg:x="874" fg:w="8"/><text x="54.8409%" y="255.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;&gt;&gt;&gt; (7 samples, 0.44%)</title><rect x="54.6533%" y="229" width="0.4372%" height="15" fill="rgb(221,200,47)" fg:x="875" fg:w="7"/><text x="54.9033%" y="239.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.31%)</title><rect x="54.7783%" y="213" width="0.3123%" height="15" fill="rgb(226,26,5)" fg:x="877" fg:w="5"/><text x="55.0283%" y="223.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.06%)</title><rect x="55.6527%" y="197" width="0.0625%" height="15" fill="rgb(249,33,26)" fg:x="891" fg:w="1"/><text x="55.9027%" y="207.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (21 samples, 1.31%)</title><rect x="55.7152%" y="197" width="1.3117%" height="15" fill="rgb(235,183,28)" fg:x="892" fg:w="21"/><text x="55.9652%" y="207.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17 samples, 1.06%)</title><rect x="55.9650%" y="181" width="1.0618%" height="15" fill="rgb(221,5,38)" fg:x="896" fg:w="17"/><text x="56.2150%" y="191.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (2 samples, 0.12%)</title><rect x="56.9019%" y="165" width="0.1249%" height="15" fill="rgb(247,18,42)" fg:x="911" fg:w="2"/><text x="57.1519%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::ops::range::RangeInclusive&lt;Idx&gt;::new (1 samples, 0.06%)</title><rect x="57.0269%" y="197" width="0.0625%" height="15" fill="rgb(241,131,45)" fg:x="913" fg:w="1"/><text x="57.2769%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (33 samples, 2.06%)</title><rect x="57.0893%" y="165" width="2.0612%" height="15" fill="rgb(249,31,29)" fg:x="914" fg:w="33"/><text x="57.3393%" y="175.50">l..</text></g><g><title>locusdb-048fa66588adbb9f`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (42 samples, 2.62%)</title><rect x="59.1505%" y="165" width="2.6234%" height="15" fill="rgb(225,111,53)" fg:x="947" fg:w="42"/><text x="59.4005%" y="175.50">lo..</text></g><g><title>locusdb-048fa66588adbb9f`&lt;ppv_lite86::generic::u32x4_generic as core::ops::bit::BitXor&gt;::bitxor::_{{closure}} (6 samples, 0.37%)</title><rect x="61.7739%" y="165" width="0.3748%" height="15" fill="rgb(238,160,17)" fg:x="989" fg:w="6"/><text x="62.0239%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16::_{{closure}} (18 samples, 1.12%)</title><rect x="62.1487%" y="165" width="1.1243%" height="15" fill="rgb(214,148,48)" fg:x="995" fg:w="18"/><text x="62.3987%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20::_{{closure}} (9 samples, 0.56%)</title><rect x="63.2730%" y="165" width="0.5621%" height="15" fill="rgb(232,36,49)" fg:x="1013" fg:w="9"/><text x="63.5230%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24::_{{closure}} (7 samples, 0.44%)</title><rect x="63.8351%" y="165" width="0.4372%" height="15" fill="rgb(209,103,24)" fg:x="1022" fg:w="7"/><text x="64.0851%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25::_{{closure}} (10 samples, 0.62%)</title><rect x="64.2723%" y="165" width="0.6246%" height="15" fill="rgb(229,88,8)" fg:x="1029" fg:w="10"/><text x="64.5223%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::StoreBytes&gt;::write_le::_{{closure}} (3 samples, 0.19%)</title><rect x="64.8969%" y="165" width="0.1874%" height="15" fill="rgb(213,181,19)" fg:x="1039" fg:w="3"/><text x="65.1469%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.81%)</title><rect x="83.5103%" y="149" width="0.8120%" height="15" fill="rgb(254,191,54)" fg:x="1337" fg:w="13"/><text x="83.7603%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.12%)</title><rect x="84.3223%" y="133" width="0.1249%" height="15" fill="rgb(241,83,37)" fg:x="1350" fg:w="2"/><text x="84.5723%" y="143.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (9 samples, 0.56%)</title><rect x="84.4472%" y="133" width="0.5621%" height="15" fill="rgb(233,36,39)" fg:x="1352" fg:w="9"/><text x="84.6972%" y="143.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (8 samples, 0.50%)</title><rect x="84.5097%" y="117" width="0.4997%" height="15" fill="rgb(226,3,54)" fg:x="1353" fg:w="8"/><text x="84.7597%" y="127.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (8 samples, 0.50%)</title><rect x="84.5097%" y="101" width="0.4997%" height="15" fill="rgb(245,192,40)" fg:x="1353" fg:w="8"/><text x="84.7597%" y="111.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (5 samples, 0.31%)</title><rect x="84.6971%" y="85" width="0.3123%" height="15" fill="rgb(238,167,29)" fg:x="1356" fg:w="5"/><text x="84.9471%" y="95.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (5 samples, 0.31%)</title><rect x="84.6971%" y="69" width="0.3123%" height="15" fill="rgb(232,182,51)" fg:x="1356" fg:w="5"/><text x="84.9471%" y="79.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (3 samples, 0.19%)</title><rect x="84.8220%" y="53" width="0.1874%" height="15" fill="rgb(231,60,39)" fg:x="1358" fg:w="3"/><text x="85.0720%" y="63.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (3 samples, 0.19%)</title><rect x="84.8220%" y="37" width="0.1874%" height="15" fill="rgb(208,69,12)" fg:x="1358" fg:w="3"/><text x="85.0720%" y="47.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.75%)</title><rect x="84.3223%" y="149" width="0.7495%" height="15" fill="rgb(235,93,37)" fg:x="1350" fg:w="12"/><text x="84.5723%" y="159.50"></text></g><g><title>locusdb-048fa66588adbb9f`DYLD-STUB$$memcpy (1 samples, 0.06%)</title><rect x="85.0094%" y="133" width="0.0625%" height="15" fill="rgb(213,116,39)" fg:x="1361" fg:w="1"/><text x="85.2594%" y="143.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::slice::iter::ChunksExactMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.94%)</title><rect x="85.0718%" y="149" width="0.9369%" height="15" fill="rgb(222,207,29)" fg:x="1362" fg:w="15"/><text x="85.3218%" y="159.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.69%)</title><rect x="86.0087%" y="149" width="0.6871%" height="15" fill="rgb(206,96,30)" fg:x="1377" fg:w="11"/><text x="86.2587%" y="159.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (6 samples, 0.37%)</title><rect x="86.6958%" y="149" width="0.3748%" height="15" fill="rgb(218,138,4)" fg:x="1388" fg:w="6"/><text x="86.9458%" y="159.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;ppv_lite86::generic::u32x4_generic as core::ops::arith::Add&gt;::add::_{{closure}} (24 samples, 1.50%)</title><rect x="87.0706%" y="149" width="1.4991%" height="15" fill="rgb(250,191,14)" fg:x="1394" fg:w="24"/><text x="87.3206%" y="159.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::array::_&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T (1 samples, 0.06%)</title><rect x="88.5696%" y="149" width="0.0625%" height="15" fill="rgb(239,60,40)" fg:x="1418" fg:w="1"/><text x="88.8196%" y="159.50"></text></g><g><title> N]&gt;::into_iter (1 samples, 0.06%)</title><rect x="88.5696%" y="133" width="0.0625%" height="15" fill="rgb(206,27,48)" fg:x="1418" fg:w="1"/><text x="88.8196%" y="143.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.25%)</title><rect x="88.6321%" y="149" width="0.2498%" height="15" fill="rgb(225,35,8)" fg:x="1419" fg:w="4"/><text x="88.8821%" y="159.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.19%)</title><rect x="88.6946%" y="133" width="0.1874%" height="15" fill="rgb(250,213,24)" fg:x="1420" fg:w="3"/><text x="88.9446%" y="143.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::cmp::min_by (2 samples, 0.12%)</title><rect x="88.9444%" y="117" width="0.1249%" height="15" fill="rgb(247,123,22)" fg:x="1424" fg:w="2"/><text x="89.1944%" y="127.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::ops::function::FnOnce::call_once (1 samples, 0.06%)</title><rect x="89.0069%" y="101" width="0.0625%" height="15" fill="rgb(231,138,38)" fg:x="1425" fg:w="1"/><text x="89.2569%" y="111.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::size_hint (1 samples, 0.06%)</title><rect x="89.0693%" y="101" width="0.0625%" height="15" fill="rgb(231,145,46)" fg:x="1426" fg:w="1"/><text x="89.3193%" y="111.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::iter::traits::iterator::Iterator::zip (5 samples, 0.31%)</title><rect x="88.8819%" y="149" width="0.3123%" height="15" fill="rgb(251,118,11)" fg:x="1423" fg:w="5"/><text x="89.1319%" y="159.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (4 samples, 0.25%)</title><rect x="88.9444%" y="133" width="0.2498%" height="15" fill="rgb(217,147,25)" fg:x="1424" fg:w="4"/><text x="89.1944%" y="143.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (2 samples, 0.12%)</title><rect x="89.0693%" y="117" width="0.1249%" height="15" fill="rgb(247,81,37)" fg:x="1426" fg:w="2"/><text x="89.3193%" y="127.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.06%)</title><rect x="89.1318%" y="101" width="0.0625%" height="15" fill="rgb(209,12,38)" fg:x="1427" fg:w="1"/><text x="89.3818%" y="111.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::slice::_&lt;impl [T]&gt;::chunks_exact_mut (2 samples, 0.12%)</title><rect x="89.1943%" y="149" width="0.1249%" height="15" fill="rgb(227,1,9)" fg:x="1428" fg:w="2"/><text x="89.4443%" y="159.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::slice::_&lt;impl [T]&gt;::split_at_mut_unchecked (2 samples, 0.12%)</title><rect x="89.1943%" y="133" width="0.1249%" height="15" fill="rgb(248,47,43)" fg:x="1428" fg:w="2"/><text x="89.4443%" y="143.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::slice::raw::from_raw_parts_mut::precondition_check (1 samples, 0.06%)</title><rect x="89.2567%" y="117" width="0.0625%" height="15" fill="rgb(221,10,30)" fg:x="1429" fg:w="1"/><text x="89.5067%" y="127.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (501 samples, 31.29%)</title><rect x="65.0843%" y="165" width="31.2929%" height="15" fill="rgb(210,229,1)" fg:x="1042" fg:w="501"/><text x="65.3343%" y="175.50">locusdb-048fa66588adbb9f`&lt;rand_chacha::chacha::ChaC..</text></g><g><title>locusdb-048fa66588adbb9f`ppv_lite86::generic::dmap2 (113 samples, 7.06%)</title><rect x="89.3192%" y="149" width="7.0581%" height="15" fill="rgb(222,148,37)" fg:x="1430" fg:w="113"/><text x="89.5692%" y="159.50">locusdb-0..</text></g><g><title>locusdb-048fa66588adbb9f`DYLD-STUB$$memcpy (5 samples, 0.31%)</title><rect x="96.3773%" y="165" width="0.3123%" height="15" fill="rgb(234,67,33)" fg:x="1543" fg:w="5"/><text x="96.6273%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::ptr::write (1 samples, 0.06%)</title><rect x="96.6896%" y="165" width="0.0625%" height="15" fill="rgb(247,98,35)" fg:x="1548" fg:w="1"/><text x="96.9396%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::slice::_&lt;impl [T]&gt;::iter (1 samples, 0.06%)</title><rect x="96.7520%" y="165" width="0.0625%" height="15" fill="rgb(247,138,52)" fg:x="1549" fg:w="1"/><text x="97.0020%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`ppv_lite86::generic::dmap2 (8 samples, 0.50%)</title><rect x="96.8145%" y="165" width="0.4997%" height="15" fill="rgb(213,79,30)" fg:x="1550" fg:w="8"/><text x="97.0645%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16::_{{closure}} (1 samples, 0.06%)</title><rect x="97.3142%" y="149" width="0.0625%" height="15" fill="rgb(246,177,23)" fg:x="1558" fg:w="1"/><text x="97.5642%" y="159.50"></text></g><g><title>locusdb-048fa66588adbb9f`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (2 samples, 0.12%)</title><rect x="97.3142%" y="165" width="0.1249%" height="15" fill="rgb(230,62,27)" fg:x="1558" fg:w="2"/><text x="97.5642%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.06%)</title><rect x="97.3766%" y="149" width="0.0625%" height="15" fill="rgb(216,154,8)" fg:x="1559" fg:w="1"/><text x="97.6266%" y="159.50"></text></g><g><title>locusdb-048fa66588adbb9f`rand::rng::Rng::gen (679 samples, 42.41%)</title><rect x="55.0906%" y="245" width="42.4110%" height="15" fill="rgb(244,35,45)" fg:x="882" fg:w="679"/><text x="55.3406%" y="255.50">locusdb-048fa66588adbb9f`rand::rng::Rng::gen</text></g><g><title>locusdb-048fa66588adbb9f`rand::distributions::integer::_&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (679 samples, 42.41%)</title><rect x="55.0906%" y="229" width="42.4110%" height="15" fill="rgb(251,115,12)" fg:x="882" fg:w="679"/><text x="55.3406%" y="239.50">locusdb-048fa66588adbb9f`rand::distributions::integer::_&lt;impl rand::d..</text></g><g><title>locusdb-048fa66588adbb9f`&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (679 samples, 42.41%)</title><rect x="55.0906%" y="213" width="42.4110%" height="15" fill="rgb(240,54,50)" fg:x="882" fg:w="679"/><text x="55.3406%" y="223.50">locusdb-048fa66588adbb9f`&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core:..</text></g><g><title>locusdb-048fa66588adbb9f`rand_core::block::BlockRng&lt;R&gt;::generate_and_set (647 samples, 40.41%)</title><rect x="57.0893%" y="197" width="40.4122%" height="15" fill="rgb(233,84,52)" fg:x="914" fg:w="647"/><text x="57.3393%" y="207.50">locusdb-048fa66588adbb9f`rand_core::block::BlockRng&lt;R&gt;::generate_a..</text></g><g><title>locusdb-048fa66588adbb9f`&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (647 samples, 40.41%)</title><rect x="57.0893%" y="181" width="40.4122%" height="15" fill="rgb(207,117,47)" fg:x="914" fg:w="647"/><text x="57.3393%" y="191.50">locusdb-048fa66588adbb9f`&lt;rand::rngs::adapter::reseeding::Reseedin..</text></g><g><title>locusdb-048fa66588adbb9f`rand::rngs::adapter::reseeding::fork::get_fork_counter (1 samples, 0.06%)</title><rect x="97.4391%" y="165" width="0.0625%" height="15" fill="rgb(249,43,39)" fg:x="1560" fg:w="1"/><text x="97.6891%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::sync::atomic::AtomicUsize::load (1 samples, 0.06%)</title><rect x="97.4391%" y="149" width="0.0625%" height="15" fill="rgb(209,38,44)" fg:x="1560" fg:w="1"/><text x="97.6891%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.12%)</title><rect x="98.1886%" y="197" width="0.1249%" height="15" fill="rgb(236,212,23)" fg:x="1572" fg:w="2"/><text x="98.4386%" y="207.50"></text></g><g><title>locusdb-048fa66588adbb9f`rand::rngs::thread::THREAD_RNG_KEY::__getit (3 samples, 0.19%)</title><rect x="98.3136%" y="197" width="0.1874%" height="15" fill="rgb(242,79,21)" fg:x="1574" fg:w="3"/><text x="98.5636%" y="207.50"></text></g><g><title>locusdb-048fa66588adbb9f`std::sys::thread_local::fast_local::Key&lt;T&gt;::get (3 samples, 0.19%)</title><rect x="98.3136%" y="181" width="0.1874%" height="15" fill="rgb(211,96,35)" fg:x="1574" fg:w="3"/><text x="98.5636%" y="191.50"></text></g><g><title>locusdb-048fa66588adbb9f`rand::rngs::thread::thread_rng::_{{closure}} (7 samples, 0.44%)</title><rect x="98.5009%" y="197" width="0.4372%" height="15" fill="rgb(253,215,40)" fg:x="1577" fg:w="7"/><text x="98.7509%" y="207.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.37%)</title><rect x="98.5634%" y="181" width="0.3748%" height="15" fill="rgb(211,81,21)" fg:x="1578" fg:w="6"/><text x="98.8134%" y="191.50"></text></g><g><title>locusdb-048fa66588adbb9f`alloc::rc::RcInnerPtr::inc_strong (4 samples, 0.25%)</title><rect x="98.6883%" y="165" width="0.2498%" height="15" fill="rgb(208,190,38)" fg:x="1580" fg:w="4"/><text x="98.9383%" y="175.50"></text></g><g><title>locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::SkipLift&lt;K,V,_,_&gt;::gen_height (715 samples, 44.66%)</title><rect x="54.3410%" y="277" width="44.6596%" height="15" fill="rgb(235,213,38)" fg:x="870" fg:w="715"/><text x="54.5910%" y="287.50">locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::SkipLift&lt;K,V..</text></g><g><title>locusdb-048fa66588adbb9f`rand::random (711 samples, 44.41%)</title><rect x="54.5909%" y="261" width="44.4097%" height="15" fill="rgb(237,122,38)" fg:x="874" fg:w="711"/><text x="54.8409%" y="271.50">locusdb-048fa66588adbb9f`rand::random</text></g><g><title>locusdb-048fa66588adbb9f`rand::rngs::thread::thread_rng (24 samples, 1.50%)</title><rect x="97.5016%" y="245" width="1.4991%" height="15" fill="rgb(244,218,35)" fg:x="1561" fg:w="24"/><text x="97.7516%" y="255.50"></text></g><g><title>locusdb-048fa66588adbb9f`std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 1.44%)</title><rect x="97.5640%" y="229" width="1.4366%" height="15" fill="rgb(240,68,47)" fg:x="1562" fg:w="23"/><text x="97.8140%" y="239.50"></text></g><g><title>locusdb-048fa66588adbb9f`std::thread::local::LocalKey&lt;T&gt;::try_with (22 samples, 1.37%)</title><rect x="97.6265%" y="213" width="1.3741%" height="15" fill="rgb(210,16,53)" fg:x="1563" fg:w="22"/><text x="97.8765%" y="223.50"></text></g><g><title>locusdb-048fa66588adbb9f`std::sys::thread_local::fast_local::Key&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="98.9382%" y="197" width="0.0625%" height="15" fill="rgb(235,124,12)" fg:x="1584" fg:w="1"/><text x="99.1882%" y="207.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;locusdb::store::memtable::skiplift::SkipLift&lt;K,V,_,_&gt; as locusdb::store::memtable::MemTable&lt;K,V&gt;&gt;::read (1,585 samples, 99.00%)</title><rect x="0.1874%" y="309" width="99.0006%" height="15" fill="rgb(224,169,11)" fg:x="3" fg:w="1585"/><text x="0.4374%" y="319.50">locusdb-048fa66588adbb9f`&lt;locusdb::store::memtable::skiplift::SkipLift&lt;K,V,_,_&gt; as locusdb::store::memtable::MemTable&lt;K,V&gt;&gt;::read</text></g><g><title>locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::SkipLift&lt;K,V,_,_&gt;::upsert_if (1,534 samples, 95.82%)</title><rect x="3.3729%" y="293" width="95.8151%" height="15" fill="rgb(250,166,2)" fg:x="54" fg:w="1534"/><text x="3.6229%" y="303.50">locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::SkipLift&lt;K,V,_,_&gt;::upsert_if</text></g><g><title>locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::SkipLift&lt;K,V,_,_&gt;::upsert_if::_{{closure}} (3 samples, 0.19%)</title><rect x="99.0006%" y="277" width="0.1874%" height="15" fill="rgb(242,216,29)" fg:x="1585" fg:w="3"/><text x="99.2506%" y="287.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.31%)</title><rect x="99.1880%" y="309" width="0.3123%" height="15" fill="rgb(230,116,27)" fg:x="1588" fg:w="5"/><text x="99.4380%" y="319.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.19%)</title><rect x="99.3129%" y="293" width="0.1874%" height="15" fill="rgb(228,99,48)" fg:x="1590" fg:w="3"/><text x="99.5629%" y="303.50"></text></g><g><title>locusdb-048fa66588adbb9f`core::option::Option&lt;T&gt;::ok_or (3 samples, 0.19%)</title><rect x="99.5003%" y="309" width="0.1874%" height="15" fill="rgb(253,11,6)" fg:x="1593" fg:w="3"/><text x="99.7503%" y="319.50"></text></g><g><title>locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::SkipLift&lt;K,V,_,_&gt;::upsert_if (3 samples, 0.19%)</title><rect x="99.6877%" y="309" width="0.1874%" height="15" fill="rgb(247,143,39)" fg:x="1596" fg:w="3"/><text x="99.9377%" y="319.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (1 samples, 0.06%)</title><rect x="99.8751%" y="245" width="0.0625%" height="15" fill="rgb(236,97,10)" fg:x="1599" fg:w="1"/><text x="100.1251%" y="255.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.06%)</title><rect x="99.8751%" y="229" width="0.0625%" height="15" fill="rgb(233,208,19)" fg:x="1599" fg:w="1"/><text x="100.1251%" y="239.50"></text></g><g><title>all (1,601 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="1601"/><text x="0.2500%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (1,601 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(220,129,5)" fg:x="0" fg:w="1601"/><text x="0.2500%" y="479.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (1,601 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(242,17,10)" fg:x="0" fg:w="1601"/><text x="0.2500%" y="463.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>locusdb-048fa66588adbb9f`std::sys::pal::unix::thread::Thread::new::thread_start (1,601 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="1601"/><text x="0.2500%" y="447.50">locusdb-048fa66588adbb9f`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>locusdb-048fa66588adbb9f`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,601 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="1601"/><text x="0.2500%" y="431.50">locusdb-048fa66588adbb9f`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>locusdb-048fa66588adbb9f`std::sys_common::backtrace::__rust_begin_short_backtrace (1,601 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="1601"/><text x="0.2500%" y="415.50">locusdb-048fa66588adbb9f`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>locusdb-048fa66588adbb9f`test::run_test::_{{closure}} (1,601 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="1601"/><text x="0.2500%" y="399.50">locusdb-048fa66588adbb9f`test::run_test::_{{closure}}</text></g><g><title>locusdb-048fa66588adbb9f`test::__rust_begin_short_backtrace (1,601 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="1601"/><text x="0.2500%" y="383.50">locusdb-048fa66588adbb9f`test::__rust_begin_short_backtrace</text></g><g><title>locusdb-048fa66588adbb9f`core::ops::function::FnOnce::call_once (1,601 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="1601"/><text x="0.2500%" y="367.50">locusdb-048fa66588adbb9f`core::ops::function::FnOnce::call_once</text></g><g><title>locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::tests::memtable_small::_{{closure}} (1,601 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="1601"/><text x="0.2500%" y="351.50">locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::tests::memtable_small::_{{closure}}</text></g><g><title>locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::tests::memtable_small (1,601 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="1601"/><text x="0.2500%" y="335.50">locusdb-048fa66588adbb9f`locusdb::store::memtable::skiplift::tests::memtable_small</text></g><g><title>locusdb-048fa66588adbb9f`rand::random (2 samples, 0.12%)</title><rect x="99.8751%" y="309" width="0.1249%" height="15" fill="rgb(212,68,19)" fg:x="1599" fg:w="2"/><text x="100.1251%" y="319.50"></text></g><g><title>locusdb-048fa66588adbb9f`rand::rng::Rng::gen (2 samples, 0.12%)</title><rect x="99.8751%" y="293" width="0.1249%" height="15" fill="rgb(240,187,13)" fg:x="1599" fg:w="2"/><text x="100.1251%" y="303.50"></text></g><g><title>locusdb-048fa66588adbb9f`rand::distributions::integer::_&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (2 samples, 0.12%)</title><rect x="99.8751%" y="277" width="0.1249%" height="15" fill="rgb(223,113,26)" fg:x="1599" fg:w="2"/><text x="100.1251%" y="287.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (2 samples, 0.12%)</title><rect x="99.8751%" y="261" width="0.1249%" height="15" fill="rgb(206,192,2)" fg:x="1599" fg:w="2"/><text x="100.1251%" y="271.50"></text></g><g><title>locusdb-048fa66588adbb9f`rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1 samples, 0.06%)</title><rect x="99.9375%" y="245" width="0.0625%" height="15" fill="rgb(241,108,4)" fg:x="1600" fg:w="1"/><text x="100.1875%" y="255.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.06%)</title><rect x="99.9375%" y="229" width="0.0625%" height="15" fill="rgb(247,173,49)" fg:x="1600" fg:w="1"/><text x="100.1875%" y="239.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.06%)</title><rect x="99.9375%" y="213" width="0.0625%" height="15" fill="rgb(224,114,35)" fg:x="1600" fg:w="1"/><text x="100.1875%" y="223.50"></text></g><g><title>locusdb-048fa66588adbb9f`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.06%)</title><rect x="99.9375%" y="197" width="0.0625%" height="15" fill="rgb(245,159,27)" fg:x="1600" fg:w="1"/><text x="100.1875%" y="207.50"></text></g></svg></svg>